import pkg, {
	description,
	homepage,
} from '../package.json'

import type {
	Plugin,
	PluginOptions,
} from '@onlyfit/core'

const options = {
	caseSensitive : {
		type        : 'boolean',
		value       : false,
		label       : 'Case sensitive attributes',
		description : 'Treat attributes in case sensitive manner (useful for custom HTML tags)',
	},
	collapseBooleanAttributes : {
		type        : 'boolean',
		value       : true,
		label       : 'Collapse boolean attributes',
		description : 'Omit attribute values from boolean attributes',
	},
	collapseInlineTagWhitespace : {
		type        : 'boolean',
		value       : true,
		label       : 'Collapse inline tag whitespace',
		description : 'Don\'t leave any spaces between display:inline elements when collapsing',
	},
	collapseWhitespace : {
		type        : 'boolean',
		value       : true,
		label       : 'Collapse whitespace',
		description : 'Collapse white space that contributes to text nodes in a document tree',
	},
	conservativeCollapse : {
		type        : 'boolean',
		value       : false,
		label       : 'Conservative whitespace collapse',
		description : 'Always collapse to 1 space, never remove it entirely',
	},
	continueOnParseError : {
		type        : 'boolean',
		value       : false,
		label       : 'Continue on parse error',
		description : 'Handle parse errors gracefully',
	},
	decodeEntities : {
		type        : 'boolean',
		value       : false,
		label       : 'Decode entities',
		description : 'Use direct Unicode characters whenever possible',
	},
	html5 : {
		type        : 'boolean',
		value       : true,
		label       : 'HTML5 parsing',
		description : 'Parse input according to HTML5 specifications',
	},
	includeAutoGeneratedTags : {
		type        : 'boolean',
		value       : true,
		label       : 'Auto-generated tags',
		description : 'Insert tags generated by HTML parser',
	},
	keepClosingSlash : {
		type        : 'boolean',
		value       : false,
		label       : 'Keep closing slash',
		description : 'Keep the trailing slash on singleton elements',
	},
	maxLineLength : {
		type        : 'number',
		value       : 0,
		label       : 'Max line length',
		description : 'Specify a maximum line length for the compressed output',
	},
	minifyCSS : {
		type        : 'boolean',
		value       : true,
		label       : 'Minify CSS',
		description : 'Minify CSS in style elements and style attributes',
	},
	minifyJS : {
		type        : 'boolean',
		value       : true,
		label       : 'Minify JS',
		description : 'Minify JavaScript in script elements and event attributes',
	},
	minifyURLs : {
		type        : 'boolean',
		value       : true,
		label       : 'Minify URLs',
		description : 'Minify URLs in various attributes',
	},
	noNewlinesBeforeTagClose : {
		type        : 'boolean',
		value       : true,
		label       : 'No newline before tag close',
		description : 'Never add a newline before a tag that closes an element',
	},
	preserveLineBreaks : {
		type        : 'boolean',
		value       : false,
		label       : 'Preserve line breaks',
		description : 'Collapse to one line break when whitespace includes a line break',
	},
	preventAttributesEscaping : {
		type        : 'boolean',
		value       : false,
		label       : 'Prevent attribute escaping',
		description : 'Prevents the escaping of attribute values',
	},
	processConditionalComments : {
		type        : 'boolean',
		value       : false,
		label       : 'Process conditional comments',
		description : 'Process contents of conditional comments through minifier',
	},
	quoteCharacter : {
		type        : 'selectString',
		value       : '"',
		label       : 'Quote character',
		description : 'Type of quote to use for attribute values',
		options     : [
			{
				label : 'Double quote',
				value : '"',
			},
			{
				label : 'Single quote',
				value : '\'',
			},
		],
	},
	removeAttributeQuotes : {
		type        : 'boolean',
		value       : false,
		label       : 'Remove attribute quotes',
		description : 'Remove quotes around attributes when possible',
	},
	removeComments : {
		type        : 'boolean',
		value       : true,
		label       : 'Remove comments',
		description : 'Strip HTML comments',
	},
	removeEmptyAttributes : {
		type        : 'boolean',
		value       : false,
		label       : 'Remove empty attributes',
		description : 'Remove all attributes with whitespace-only values',
	},
	removeEmptyElements : {
		type        : 'boolean',
		value       : false,
		label       : 'Remove empty elements',
		description : 'Remove all elements with empty contents',
	},
	removeOptionalTags : {
		type        : 'boolean',
		value       : false,
		label       : 'Remove optional tags',
		description : 'Remove optional tags',
	},
	removeRedundantAttributes : {
		type        : 'boolean',
		value       : false,
		label       : 'Remove redundant attributes',
		description : 'Remove attributes when value matches default',
	},
	removeScriptTypeAttributes : {
		type        : 'boolean',
		value       : false,
		label       : 'Remove script type attributes',
		description : 'Remove type="text/javascript" from script tags',
	},
	removeStyleLinkTypeAttributes : {
		type        : 'boolean',
		value       : false,
		label       : 'Remove style/link type attributes',
		description : 'Remove type="text/css" from style and link tags',
	},
	removeTagWhitespace : {
		type        : 'boolean',
		value       : false,
		label       : 'Remove tag whitespace',
		description : 'Remove space between attributes whenever possible',
	},
	sortAttributes : {
		type        : 'boolean',
		value       : false,
		label       : 'Sort attributes',
		description : 'Sort attributes by frequency',
	},
	sortClassName : {
		type        : 'boolean',
		value       : false,
		label       : 'Sort class names',
		description : 'Sort style classes by frequency',
	},
	trimCustomFragments : {
		type        : 'boolean',
		value       : false,
		label       : 'Trim custom fragments',
		description : 'Trim whitespace around ignoreCustomFragments',
	},
	useShortDoctype : {
		type        : 'boolean',
		value       : false,
		label       : 'Use short doctype',
		description : 'Replaces the doctype with the short (HTML5) doctype',
	},
} as const satisfies PluginOptions

const onlyfitPlugin = ( ): Plugin<PluginOptions, typeof options> =>
	async utils => {

		const instance = async () => {

			return !utils.env.isBrowser
				? await import( './index' )
				: await import( './browser' )

		}
		return {
			data : {
				description,
				homepage,
				package : pkg,
			},
			optimizer : {
				options,
				mimetypes : [ 'text/html' ],

				fn : async ( {
					input, options,
				} ) => {

					const { minify } = await instance( )
					// if ( opts?.wasmInput ) await init( opts.wasmInput )
					const inputStr = utils.convert.arrayBuffer2string( input )

					const res = await minify( inputStr, options )

					return utils.convert.string2arrayBuffer( res )

				},
			},
		}

	}
export default onlyfitPlugin
